#!/usr/bin/env python3
"""
Test script to verify custom type creation localization.
This script tests the Ukrainian translations for custom measurement type creation,
specifically the issue where skip description shows English messages and buttons.
"""

import asyncio
import sys
import os
from unittest.mock import AsyncMock, MagicMock, patch

# Add src directory to Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from easy_track.i18n.translator import translator


class MockUser:
    def __init__(self, user_id=12345):
        self.id = user_id
        self.first_name = "Test"
        self.last_name = "User"
        self.username = "testuser"


class MockMessage:
    def __init__(self, user_id=12345):
        self.from_user = MockUser(user_id)
        self.reply = AsyncMock()


class MockCallback:
    def __init__(self, user_id=12345):
        self.from_user = MockUser(user_id)
        self.message = MockMessage(user_id)
        self.answer = AsyncMock()


class MockState:
    def __init__(self, data=None):
        self.data = data or {
            "custom_type_name": "–¢–µ—Å—Ç–æ–≤–∏–π —Ç–∏–ø",
            "custom_type_unit": "—Ç–µ—Å—Ç"
        }

    async def get_data(self):
        return self.data

    async def clear(self):
        self.data = {}


async def test_custom_type_translations():
    """Test custom type creation translations."""
    print("üß™ Testing Custom Type Creation Translations")
    print("=" * 55)

    # Test Ukrainian translations for custom types
    user_lang = "uk"
    print(f"\nüìù Testing {user_lang.upper()} translations:")
    print("-" * 35)

    custom_type_keys = [
        "custom_types.create_button",
        "custom_types.title",
        "custom_types.name_prompt",
        "custom_types.unit_prompt",
        "custom_types.description_prompt",
        "custom_types.skip_description",
        "custom_types.success",
        "custom_types.success_with_description",
        "custom_types.error",
        "custom_types.cancel"
    ]

    print("‚úÖ Custom type translation keys:")
    for key in custom_type_keys:
        try:
            if key == "custom_types.success":
                translation = translator.get(key, user_lang, name="–¢–µ—Å—Ç–æ–≤–∏–π —Ç–∏–ø", unit="—Ç–µ—Å—Ç")
            elif key == "custom_types.success_with_description":
                translation = translator.get(key, user_lang, name="–¢–µ—Å—Ç–æ–≤–∏–π —Ç–∏–ø", unit="—Ç–µ—Å—Ç", description="–û–ø–∏—Å —Ç–µ—Å—Ç—É")
            else:
                translation = translator.get(key, user_lang)
            print(f"  {key}: {translation[:50]}{'...' if len(translation) > 50 else ''}")
        except Exception as e:
            print(f"  ‚ùå {key}: ERROR - {e}")

    # Test button translations
    button_keys = [
        "buttons.add_measurement",
        "buttons.manage_types",
        "buttons.back_to_menu",
        "common.error"
    ]

    print(f"\nüîò Button translations:")
    for key in button_keys:
        try:
            translation = translator.get(key, user_lang)
            print(f"  {key}: {translation}")
        except Exception as e:
            print(f"  ‚ùå {key}: ERROR - {e}")


async def simulate_skip_description_flow():
    """Simulate the skip description workflow."""
    print("\nüîÑ Simulating Skip Description Flow")
    print("=" * 40)

    print("üì± User workflow:")
    print("1. User creates custom type (name: '–¢–µ—Å—Ç–æ–≤–∏–π —Ç–∏–ø', unit: '—Ç–µ—Å—Ç')")
    print("2. User clicks '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–ø–∏—Å' button")
    print("3. System should show success message in Ukrainian")
    print("4. Buttons should be in Ukrainian")

    # Mock the state and callback
    state = MockState()
    callback = MockCallback()

    user_lang = "uk"

    print(f"\nüìä Expected success message:")
    try:
        success_message = translator.get(
            "custom_types.success",
            user_lang,
            name="–¢–µ—Å—Ç–æ–≤–∏–π —Ç–∏–ø",
            unit="—Ç–µ—Å—Ç"
        )
        print(f"‚úÖ Success message: {success_message[:100]}...")
    except Exception as e:
        print(f"‚ùå Error getting success message: {e}")

    print(f"\nüîò Expected button texts:")
    button_configs = [
        ("buttons.add_measurement", "add_measurement"),
        ("buttons.manage_types", "manage_types"),
        ("buttons.back_to_menu", "back_to_menu")
    ]

    for key, callback_data in button_configs:
        try:
            button_text = translator.get(key, user_lang)
            print(f"  ‚úÖ {callback_data}: '{button_text}'")
        except Exception as e:
            print(f"  ‚ùå {callback_data}: ERROR - {e}")


async def test_error_handling_localization():
    """Test error handling localization."""
    print("\nüö® Testing Error Handling Localization")
    print("=" * 45)

    user_lang = "uk"

    print("üìù Testing error message translations:")
    error_keys = [
        "common.error",
        "custom_types.error",
        "custom_types.name_too_short",
        "custom_types.name_too_long",
        "custom_types.name_exists",
        "custom_types.unit_empty",
        "custom_types.unit_too_long",
        "custom_types.description_too_long"
    ]

    for key in error_keys:
        try:
            if key == "custom_types.name_exists":
                translation = translator.get(key, user_lang, name="–¢–µ—Å—Ç–æ–≤–∏–π —Ç–∏–ø")
            else:
                translation = translator.get(key, user_lang)
            print(f"  ‚úÖ {key}: {translation}")
        except Exception as e:
            print(f"  ‚ùå {key}: ERROR - {e}")


def test_before_after_comparison():
    """Show before/after comparison."""
    print("\nüîÑ Before/After Problem Analysis")
    print("=" * 40)

    print("‚ùå BEFORE (Problem scenario):")
    print("   1. User creates custom type")
    print("   2. User clicks '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–ø–∏—Å' (Ukrainian)")
    print("   3. Success message appears in ENGLISH")
    print("   4. Buttons appear in ENGLISH:")
    print("      - 'Add Measurement' (should be '–î–æ–¥–∞—Ç–∏ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è')")
    print("      - 'Manage Types' (should be '–ö–µ—Ä—É–≤–∞—Ç–∏ —Ç–∏–ø–∞–º–∏')")
    print("      - 'Back to Menu' (should be '–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é')")

    print("\n‚úÖ AFTER (Expected behavior):")
    print("   1. User creates custom type")
    print("   2. User clicks '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–ø–∏—Å' (Ukrainian)")
    print("   3. Success message appears in UKRAINIAN")
    print("   4. Buttons appear in UKRAINIAN:")

    user_lang = "uk"
    try:
        add_measurement = translator.get("buttons.add_measurement", user_lang)
        manage_types = translator.get("buttons.manage_types", user_lang)
        back_to_menu = translator.get("buttons.back_to_menu", user_lang)

        print(f"      - '{add_measurement}'")
        print(f"      - '{manage_types}'")
        print(f"      - '{back_to_menu}'")
    except Exception as e:
        print(f"      ‚ùå Error getting button translations: {e}")


async def test_language_detection_issue():
    """Test potential language detection issues."""
    print("\nüîç Testing Language Detection Issues")
    print("=" * 40)

    print("üßê Potential issues in the code:")
    print("   1. handle_skip_description hardcoded 'en' language")
    print("   2. create_custom_measurement_type error handling")
    print("   3. User language not properly retrieved from callback")

    print("\nüîß Code analysis:")
    print("   ‚ùå Problem in handle_skip_description:")
    print("       await callback.answer(translator.get('common.error', 'en'))")
    print("       ‚Üë Hardcoded 'en' language!")

    print("\n   ‚úÖ Should be:")
    print("       user_lang = await get_user_language_from_callback(callback)")
    print("       await callback.answer(translator.get('common.error', user_lang))")

    print("\nüéØ Root cause analysis:")
    print("   ‚Ä¢ User language retrieval missing in error handlers")
    print("   ‚Ä¢ Fallback language set to 'en' instead of 'uk'")
    print("   ‚Ä¢ No proper error handling for language detection failures")


async def simulate_full_workflow():
    """Simulate the complete custom type creation workflow."""
    print("\nüé¨ Full Workflow Simulation")
    print("=" * 35)

    user_lang = "uk"

    workflow_steps = [
        ("Step 1", "User clicks '–°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π —Ç–∏–ø'"),
        ("Step 2", "User enters name: '–û–∫—Ä—É–∂–Ω—ñ—Å—Ç—å —Å—Ç–µ–≥–Ω–∞'"),
        ("Step 3", "User enters unit: '—Å–º'"),
        ("Step 4", "User sees description prompt with '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–ø–∏—Å' button"),
        ("Step 5", "User clicks '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–ø–∏—Å'"),
        ("Step 6", "System creates type and shows success message"),
        ("Step 7", "User sees buttons to continue")
    ]

    print("üì± Complete workflow:")
    for step, description in workflow_steps:
        print(f"   {step}: {description}")

    print(f"\nüìä Final success message should be:")
    try:
        success_message = translator.get(
            "custom_types.success",
            user_lang,
            name="–û–∫—Ä—É–∂–Ω—ñ—Å—Ç—å —Å—Ç–µ–≥–Ω–∞",
            unit="—Å–º"
        )
        print(f"‚úÖ {success_message}")
    except Exception as e:
        print(f"‚ùå Error: {e}")


def main():
    """Main test function."""
    try:
        print("üöÄ Testing Custom Type Localization Issues")
        print("=" * 60)

        asyncio.run(test_custom_type_translations())
        asyncio.run(simulate_skip_description_flow())
        asyncio.run(test_error_handling_localization())
        test_before_after_comparison()
        asyncio.run(test_language_detection_issue())
        asyncio.run(simulate_full_workflow())

        print("\nüéâ Test Analysis Complete!")
        print("\nüí° Issues Found:")
        print("   ‚Ä¢ handle_skip_description hardcodes English language")
        print("   ‚Ä¢ Error handlers don't retrieve user language properly")
        print("   ‚Ä¢ Fallback language should be Ukrainian, not English")

        print("\nüîß Fixes Needed:")
        print("   1. Fix handle_skip_description to get user language")
        print("   2. Update error handlers to use proper localization")
        print("   3. Change default fallback language to Ukrainian")
        print("   4. Add proper error handling for language detection")

        print("\n‚úÖ All translations exist and are correct!")
        print("   The issue is in the code logic, not in translation files.")

    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
